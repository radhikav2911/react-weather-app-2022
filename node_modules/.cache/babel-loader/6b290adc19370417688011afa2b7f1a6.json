{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\react-weather-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport Loader from \"./Loader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api = {\n  key: \"d6a1242e4fb7d7b5d17cc1f071627167\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n};\n\nfunction App() {\n  _s();\n\n  const [location, setLocation] = useState(\"stockholm\");\n  const [loading, setLoading] = useState(false);\n  const [locationInfo, setLocationInfo] = useState({});\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = () => {\n    setLoading(true);\n    fetch(`${api.base}weather?q=${location}&units=metric&APPID=${api.key}`).then(res => res.json()).then(result => {\n      setLocationInfo(result);\n      setLocation(\"\");\n      setLoading(false);\n      console.log(result);\n    });\n  };\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetchData();\n    }\n  };\n\n  const getCurrentDate = () => {\n    let newDate = new Date();\n    let day = newDate.toLocaleDateString(\"en-US\", {\n      weekday: \"long\"\n    });\n    let date = newDate.getDate();\n    let month = newDate.toLocaleString(\"default\", {\n      month: \"long\"\n    });\n    let year = newDate.getFullYear();\n    return `${day}, ${date} ${month} ${year}`;\n  };\n\n  const bgImage = climate => {\n    if (climate === \"Clouds\") {\n      return \"container clouds\";\n    } else if (climate === \"Rain\") {\n      return \"rain\";\n    } else if (climate === \"Mist\") {\n      return \"mist\";\n    } else if (climate === \"Sunny\") {\n      return \"warm\";\n    } else if (climate === \"Snow\") {\n      return \"snow\";\n    } else if (climate === \"Clear\") {\n      return \"clear\";\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: typeof locationInfo.main !== \"undefined\" ? bgImage(locationInfo.weather[0].main) : \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-box\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"search-input\",\n          placeholder: \"Search with city...\",\n          value: location,\n          onKeyPress: search,\n          onChange: e => setLocation(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this) : locationInfo && locationInfo.cod !== \"404\" ? locationInfo.weather ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"location-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"location\",\n            children: [locationInfo.name, \", \", locationInfo.sys.country]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"date\",\n            children: getCurrentDate()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"weather-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"temperature\",\n            children: [\" \", Math.round(locationInfo.main.temp), \"\\xB0c\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"climate\",\n            children: locationInfo.weather[0].main\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this) : \"\" : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notFound\",\n        children: \" Sorry! City not found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"nbkjCVADWKY4Mv/nZ/XpwhuSMAA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/React/react-weather-app/src/App.js"],"names":["useState","useEffect","Loader","api","key","base","App","location","setLocation","loading","setLoading","locationInfo","setLocationInfo","fetchData","fetch","then","res","json","result","console","log","search","evt","getCurrentDate","newDate","Date","day","toLocaleDateString","weekday","date","getDate","month","toLocaleString","year","getFullYear","bgImage","climate","main","weather","e","target","value","cod","name","sys","country","Math","round","temp"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport Loader from \"./Loader\";\n\nconst api = {\n  key: \"d6a1242e4fb7d7b5d17cc1f071627167\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  const [location, setLocation] = useState(\"stockholm\");\n  const [loading, setLoading] = useState(false);\n  const [locationInfo, setLocationInfo] = useState({});\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = () => {\n    setLoading(true);\n    fetch(`${api.base}weather?q=${location}&units=metric&APPID=${api.key}`)\n      .then((res) => res.json())\n      .then((result) => {\n        setLocationInfo(result);\n        setLocation(\"\");\n        setLoading(false);\n        console.log(result);\n      });\n  };\n\n  const search = (evt) => {\n    if (evt.key === \"Enter\") {\n      fetchData();\n    }\n  };\n\n  const getCurrentDate = () => {\n    let newDate = new Date();\n    let day = newDate.toLocaleDateString(\"en-US\", { weekday: \"long\" });\n    let date = newDate.getDate();\n    let month = newDate.toLocaleString(\"default\", { month: \"long\" });\n    let year = newDate.getFullYear();\n    return `${day}, ${date} ${month} ${year}`;\n  };\n\n  const bgImage = (climate) => {\n    if (climate === \"Clouds\") {\n      return \"container clouds\";\n    } else if (climate === \"Rain\") {\n      return \"rain\";\n    } else if (climate === \"Mist\") {\n      return \"mist\";\n    } else if (climate === \"Sunny\") {\n      return \"warm\";\n    } else if (climate === \"Snow\") {\n      return \"snow\";\n    } else if (climate === \"Clear\") {\n      return \"clear\";\n    }\n  };\n\n  return (\n    <div\n      className={\n        typeof locationInfo.main !== \"undefined\"\n          ? bgImage(locationInfo.weather[0].main)\n          : \"container\"\n      }\n    >\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-input\"\n            placeholder=\"Search with city...\"\n            value={location}\n            onKeyPress={search}\n            onChange={(e) => setLocation(e.target.value)}\n          />\n        </div>\n        {loading ? (\n          <Loader />\n        ) : locationInfo && locationInfo.cod !== \"404\" ? (\n          locationInfo.weather ? (\n            <div>\n              <div className=\"location-box\">\n                <div className=\"location\">\n                  {locationInfo.name}, {locationInfo.sys.country}\n                </div>\n\n                <div className=\"date\">{getCurrentDate()}</div>\n              </div>\n              <div className=\"weather-box\">\n                <div className=\"temperature\">\n                  {\" \"}\n                  {Math.round(locationInfo.main.temp)}°c\n                </div>\n                <div className=\"climate\">{locationInfo.weather[0].main}</div>\n              </div>\n            </div>\n          ) : (\n            \"\"\n          )\n        ) : (\n          <div className=\"notFound\"> Sorry! City not found</div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}